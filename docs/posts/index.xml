<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>https://y2kappa.github.io/blog/posts/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Nov 2020 10:32:47 +0000</lastBuildDate>
    
	<atom:link href="https://y2kappa.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Experience</title>
      <link>https://y2kappa.github.io/blog/posts/experience/</link>
      <pubDate>Sun, 01 Nov 2020 10:32:47 +0000</pubDate>
      
      <guid>https://y2kappa.github.io/blog/posts/experience/</guid>
      <description>I am finally able to appreciate experience. My ego is finally giving it to the people who earned it.</description>
    </item>
    
    <item>
      <title>Timing Your Function Execution (in Rust)</title>
      <link>https://y2kappa.github.io/blog/posts/timing-your-function-execution/</link>
      <pubDate>Sat, 19 Sep 2020 20:27:20 +0300</pubDate>
      
      <guid>https://y2kappa.github.io/blog/posts/timing-your-function-execution/</guid>
      <description>If you ever had to migrate some slow code (Python) to Rust and were mindblown by the speed gains, you are probably now always paranoid for adding extra new code, just so you don&amp;rsquo;t ruin the amazing speed you gained. Those annoying new features adding extra cycles!
I know I am. I have an AWS lambda function that used to run for 15 seconds end-to-end in Python. I managed to get it to 1.</description>
    </item>
    
    <item>
      <title>Unit Testing in Rust (or why I love Rust)</title>
      <link>https://y2kappa.github.io/blog/posts/unit-testing-in-rust/</link>
      <pubDate>Tue, 12 May 2020 08:01:54 +0100</pubDate>
      
      <guid>https://y2kappa.github.io/blog/posts/unit-testing-in-rust/</guid>
      <description>If you&amp;rsquo;ve been through the process of adding unit tests in C++ with gmock or OCaml or python you know that you at least need to create a new file, add some linking flags, import a library and trigger the test suite from code and then execute the test program separately.
No wonder it takes a not so subtle code review comment to get people to start writing tests.
Let&amp;rsquo;s take another use case.</description>
    </item>
    
    <item>
      <title>A less dreadful linked list (or why I like OCaml)</title>
      <link>https://y2kappa.github.io/blog/posts/linked-list/</link>
      <pubDate>Sun, 10 May 2020 22:18:20 +0100</pubDate>
      
      <guid>https://y2kappa.github.io/blog/posts/linked-list/</guid>
      <description>Let&amp;rsquo;s assume the entire universe hates linked lists. But in OCaml</description>
    </item>
    
    <item>
      <title>Hello World, yet another programming blog.</title>
      <link>https://y2kappa.github.io/blog/posts/hello-world/</link>
      <pubDate>Sun, 10 May 2020 19:17:56 +0100</pubDate>
      
      <guid>https://y2kappa.github.io/blog/posts/hello-world/</guid>
      <description>I recently listened to a podcast with Elizabeth Gilbert where she mentioned that sometimes when stumbling upon a well written sentence, it makes her want to stand up an clap at the beauty of it.
I believe the same concept applies to code. Or at least it has happened to me a few times while reading code and being like Ok, that&#39;s beautiful.
I stand by the idea that code is meant to be read, that heuristically code is probably read 10 times more than it is written and therefore we should also optimize for that.</description>
    </item>
    
  </channel>
</rss>